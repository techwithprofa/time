version: '3.8' # Specify docker-compose version

services:
  app:
    build: . # Build the image from the Dockerfile in the current directory
    ports:
      - "${API_PORT:-3000}:${API_PORT:-3000}" # Map host port to container port, using .env or defaulting
    depends_on:
      - db
    environment:
      # Pass environment variables from .env file to the container
      # Note: For sensitive data like DB_PASSWORD, it's often better to use Docker secrets
      # or have docker-compose directly pass them from its own environment or a specified env_file.
      # However, for this setup, we'll rely on the .env being available at runtime for the Node app.
      # The Node app itself uses dotenv to load .env.
      # We can also explicitly list them here if needed and they'd override .env values if both are present.
      NODE_ENV: development 
      DB_HOST: db # This is the service name of the database container
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_DATABASE: ${DB_DATABASE}
      DB_PORT: ${DB_PORT}
      API_PORT: ${API_PORT:-3000}
    volumes:
      - .:/usr/src/app # Mount the current directory to /usr/src/app in the container for development (live reload)
      - /usr/src/app/node_modules # Exclude node_modules from being overwritten by the host mount
    # command: npm run dev # Optional: if you have a dev script in package.json for nodemon

  db:
    image: postgres:15-alpine # Use an official PostgreSQL image
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
    ports:
      - "${DB_PORT_EXTERNAL:-5433}:${DB_PORT:-5432}" # Map host port (e.g., 5433) to container's PostgreSQL port (5432)
                                      # Using DB_PORT_EXTERNAL to avoid conflict if local PG is running on 5432
                                      # The internal DB_PORT is still 5432 for the app service.
    volumes:
      - pgdata:/var/lib/postgresql/data # Persist database data
      - ./db/schema.sql:/docker-entrypoint-initdb.d/init.sql # Mount schema.sql to initialize DB on startup
                                                              # Files in /docker-entrypoint-initdb.d are run in alphabetical order.
    restart: unless-stopped

volumes:
  pgdata: # Define the named volume for persistent data
